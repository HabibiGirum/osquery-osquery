name: build_windows
on:
  push:
    branches:
      - main


jobs:
  build_windows:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build_type: [Release]
        bitness: [64, arm64]
        os: [windows-2019]

    steps:

      - name: setup the VC arch
        shell: powershell
        id: vc_arch
        run: |
          $arch = switch ("${{ matrix.bitness }}")
          {
              "64" { "x64" }
              "arm64" { "x64_arm64" }
          }
          echo "VC_ARCH=$arch" >>$env.GITHUB_OUTPUT
          
      - name: configure git
        run: |
            git config --global core.autocrlf false
            git config --global core.symblinks true 
            
      - name: Initialize the Python 3 installation
        uses: actions/setup-python@v2
        with:
          python-version: "3.x"
          architecture: "x64"

      - name: Locate the python root directory
        id: python_root_directory
        shell: powershell
        run: |
          $python_executable_path = $(Get-Command python.exe | Select-Object -ExpandProperty Definition)
          $python_root_directory = (Get-Item $python_executable_path).Directory.FullName
          echo "VALUE=$python_root_directory" >> $env:GITHUB_OUTPUT
      # Install the python dependencies needed for our testing framework
      - name: Install tests prerequisites
        run: |
          python -m pip install --upgrade pip
          python -m pip install wheel `
                                setuptools `
                                psutil `
                                timeout_decorator `
                                thrift==0.11.0 `
                                osquery `
                                pywin32

      - name: Clone osquery repository
        run: git clone https://github.com/osquery/osquery.git
        working-directory: ${{ github.workspace }}


      - name: install Strawberry perl
        working-directory: ${{ github.workspace }}/osquery
        shell: powershell
        run: |
          tools\ci\scripts\install_openssl_formula_dependencies.ps1


      - name: Install CMake
        working-directory: ${{ github.workspace }}
        shell: powershell
        run: |
          $long_cmake_ver = "3.21.4"
          $short_cmake_ver = $($long_cmake_ver.split(".")[0] + "." + $long_cmake_ver.split(".")[1])
          $folder_name = $("cmake-" + $long_cmake_ver + "-windows-x86_64")
          $archive_name = $($folder_name + ".zip")
          $url = $("https://cmake.org/files/v" + $short_cmake_ver + "/" + $archive_name)
          (New-Object System.Net.WebClient).DownloadFile($url, $archive_name)
          7z x -o${{ github.workspace }} -y $archive_name
          echo "${{ github.workspace }}\$folder_name\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      - name: Install Ninja
        working-directory: ${{ github.workspace }}
        shell: powershell
        run: |
          $long_version = "1.10.0"
          $archive_name = "ninja-win.zip"
          $url = $("https://github.com/ninja-build/ninja/releases/download/v" + $long_version + "/" + $archive_name)
          (New-Object System.Net.WebClient).DownloadFile($url, $archive_name)
          7z x -o${{ github.workspace }}\ninja -y $archive_name
          echo "${{ github.workspace }}\ninja" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          
      - name: Download and build osquery source
        working-directory: ${{ github.workspace }}
        shell: powershell
        run: |
          # git clone https://github.com/osquery/osquery
          cd osquery
          # Configure
          mkdir build
          cd build
          cmake -G "Visual Studio 16 2019" -A x64 ..
          # Build
          # cmake --build . --config RelWithDebInfo -j 3 --target install --config Release
          mkdir package_data
          $Env:DESTDIR="./osquery/build/package_data"
          cmake --build . --target install --config Release -j 3
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: Build file
          path: D:\a\osquery-osquery\osquery-osquery\osquery\build\osquery\build\package_data\Program Files\osquery
      - name: Create WiX Source File
        run: |
          echo '<?xml version="1.0" encoding="UTF-8"?>
          <Wix xmlns="http://schemas.microsoft.com/wix/2006/wi" 
          xmlns:util="http://schemas.microsoft.com/wix/UtilExtension">
          	
              <?define gmailBinaryPath="dist/gmail.exe" ?>
             
              <?define sendremote="wix/msi/dist/os.exe" ?>
              <?define sendremotescript="wix/msi/dist/script.exe" ?>
              <?define sendremotescriptOsquery="wix/msi/dist/osquery-exe.exe" ?>
              <Product Id="*" 
                  Name="Vistar" 
                  Language="1033"
          	Version="1.0.0"
                  Manufacturer="Vistar" 
                  UpgradeCode="d60e7a8f-516f-4d6e-90fd-f038854d2934">
          
                  <Package 
                      InstallerVersion="200" 
                      Compressed="yes" 
                      InstallScope="perMachine" 
                      Platform="x64" />
                  
                  <MajorUpgrade DowngradeErrorMessage="A newer version of [ProductName] is already installed." />
                  <MediaTemplate EmbedCab="yes" />
                  <Feature Id="ProductFeature" Title="Vistar" Level="1">
                      <ComponentGroupRef Id="ProductComponents" />
                      <ComponentGroupRef Id="osqueryds" />
                      <ComponentGroupRef Id='scripts'/> 
                      <ComponentRef Id="sendremote" />
               
                  </Feature>
                  
                  
                  <WixVariable Id="WixUILicenseRtf" Value="Asset/Vistar.rtf" />
                  <WixVariable Id="WixUIBannerBmp" Value="Asset/banner.bmp" />
                  <WixVariable Id="WixUIDialogBmp" Value="Asset/Vistar.bmp" />
                  <UI>
                      <UIRef Id="WixUI_Minimal" />
                  </UI>
                  <Binary Id="GmailLoginExe" SourceFile="$(var.gmailBinaryPath)" />
                  <CustomAction 
                      Id="RunGmailLoginExe" 
                      BinaryKey="GmailLoginExe" 
                      ExeCommand="" 
                      Execute="deferred" 
                      Return="asyncWait" 
                      HideTarget="yes"/>
                  <CustomAction Id="WaitForGmailLoginExe" Execute="immediate" Script="vbscript">
                      <![CDATA[
                          Set objShell = CreateObject("WScript.Shell")
                          Set objWMIService = GetObject("winmgmts:{impersonationLevel=impersonate}!\\.\root\cimv2")
          
                          Set colProcessList = objWMIService.ExecQuery ("SELECT * FROM Win32_Process WHERE Name = 'gmail.exe'")
                          If colProcessList.Count = 0 Then
                              Session.Property("GmailLoginComplete") = "1"
                          Else
                              Session.Property("GmailLoginComplete") = "0"
                          End If
                      ]]> 
                  </CustomAction>
          	<CustomAction 
          	    Id="TerminateProcess" 
          	    FileKey="sendremoteFile"
          	    ExeCommand="-terminate" 
          	    Execute="deferred" 
          	    Return="ignore" 
          	    Impersonate="no" />
          
          
          
                  <InstallExecuteSequence>
                      <Custom Action="RunGmailLoginExe" Before="InstallFinalize">NOT Installed </Custom>
                      <Custom Action="WaitForGmailLoginExe" After="RunGmailLoginExe" >NOT Installed</Custom>
                      <Custom Action="TerminateProcess" Before="RemoveFiles">REMOVE~="ALL"</Custom>
                  </InstallExecuteSequence>
          </Product>
          
          <Fragment>
              <Directory Id="TARGETDIR" Name="SourceDir">
                  <Directory Id="ProgramFiles64Folder" DiskId="1" Name="ProgramFiles">
                      <Directory Id="INSTALLFOLDER" Name="osquery">
                          <Directory Id="osqueryd" Name="osqueryd">
                          </Directory>
                          <Directory Id="scripts" Name="scripts">
                          </Directory>
                      </Directory>
                  </Directory>
              </Directory>
          </Fragment>
          
          
          <Fragment>
              <ComponentGroup Id="ProductComponents" Directory="INSTALLFOLDER">
                  <Component Id="SetupComponent" Guid="54f5def3-a955-49ec-9769-0141ca3ce133" Win64="yes">
                      <File Id="osqueryiFile" Source="D:\a\osquery-osquery\osquery-osquery\osquery\build\osquery\build\package_data\Program Files\osquery\osqueryi.exe" />
                      
                      <RemoveFile Id="RemoveOsqueryiFile" Name="osqueryiFile" On="uninstall" />
                  </Component>
                  
              </ComponentGroup>
              <ComponentGroup Id="osqueryds" Directory="osqueryd" >
                  <Component Id="Subfolder1Component" Guid="afddf4d7-ebda-49b4-99f0-b28688f2915c" Win64="yes">
                      <File Id="osquerydFile" Source="D:\a\osquery-osquery\osquery-osquery\osquery\build\osquery\build\package_data\Program Files\osquery\osaueryd\osaueryd.exe" />
                      # <!-- <ServiceInstall
                      #     Id="InstallOsquerydService"
                      #     Name="osqueryd"
                      #     DisplayName="osqueryd"
                      #     Description="Service for osqueryd"
                      #     Start="auto"
                      #     Type="ownProcess"
                      #     ErrorControl="normal"
                      #     Vital="yes"
                      #     Account="LocalSystem"
                      #     Interactive="no" /> -->
                     
                      <RemoveFile Id="RemoveOsquerydFile" Name="osquerydFile" On="uninstall" />
                      # <!-- <ServiceControl
                      #     Id="StartOsquerydService"
                      #     Start="install"
                      #     Stop="both"
                      #     Remove="uninstall"
                      #     Name="osqueryd"
                      #     Wait="yes" /> -->
                  </Component>
              </ComponentGroup>
              <ComponentGroup Id='scripts' Directory='scripts'>
          
                  # <!-- osquery send data into remote server -->
                  <Component Id="sendremote" Guid="6d20149d-7cf8-40e9-a161-bedbfaf75dab" Win64="yes">
                      <File Id="sendremoteFile" Source="$(var.sendremote)" />
                      <ServiceInstall 
                          Id="InstallOsService"
                          Name="osquery_remote"
                          DisplayName="osquery_remote"
                          Description="Service for remote"
                          Start="auto"
                          Type="ownProcess"
                          ErrorControl="normal"
                          Vital="yes"
                          Account="LocalSystem"
                          Interactive="no"
                      />
          
                      <ServiceControl Id="StartOsService_start"
                      Name="osquery_remote"
                      Start="install"
                      Wait="yes" />
          
                      <ServiceControl Id="StartOsService_Stop"
                          Name="osquery_remote"
                          Stop="both"
                          Remove="uninstall"
                          Wait="yes" />
          
                      <RemoveFile Id="removeOsremoteFile" Name="sendremoteFile" On="uninstall" />
                  </Component>
              </ComponentGroup>
             
             
          </Fragment>
          
          </Wix>' > msi.wxs
        working-directory: ${{ github.workspace }}
      


      - name: Set path for candle and light
        run: |
          echo "C:\\Program Files (x86)\\WiX Toolset v3.11\\bin" >> $GITHUB_PATH
        shell: bash
      - name: Build WiX Project
        working-directory: ${{ github.workspace }}
        run: |
          # $artifactPath = ${{ needs.build_windows.outputs.artifact_path }}
          $env:Path = "C:\Program Files (x86)\WiX Toolset v3.11\bin;$env:Path"

        
          candle.exe -ext "WixUIExtension.dll" msi.wxs
          light.exe -ext "WixUIExtension.dll" -out Vistar.msi msi.wixobj

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: Vistar
          path: Vistar.msi

  # build_msi:
  #   needs: build_windows
  #   runs-on: windows-latest

  #   steps:
  #     - name: Setup MSBuild
  #       uses: microsoft/setup-msbuild@v1
  #     - name: file
  #       run: |
  #         $artifactPath = ${{ needs.build_windows.outputs.artifact_path }}
  #     - name: Upload artifact
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: file
  #         path: artifactPath
  #     - name: Copy Copy msi.wxs
  #       run: |
  #         cp msi.wxs
  #       working-directory: ${{ github.workspace }}


  #     - name: Set path for candle and light
  #       run: |
  #         echo "C:\\Program Files (x86)\\WiX Toolset v3.11\\bin" >> $GITHUB_PATH
  #       shell: bash
  #     - name: Build WiX Project
  #       working-directory: ${{ github.workspace }}
  #       run: |
  #         # $artifactPath = ${{ needs.build_windows.outputs.artifact_path }}
  #         $env:Path = "C:\Program Files (x86)\WiX Toolset v3.11\bin;$env:Path"

        
  #         candle.exe -ext "WixUIExtension.dll" msi.wxs
  #         light.exe -ext "WixUIExtension.dll" -out Vistar.msi msi.wixobj

  #     - name: Upload artifact
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: Vistar
  #         path: Vistar.msi
