name: build_windows
on:
  push:
    branches:
      - main


jobs:
  build_windows:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build_type: [Release]
        bitness: [64, arm64]
        os: [windows-2019]

    steps:

      - name: setup the VC arch
        shell: powershell
        id: vc_arch
        run: |
          $arch = switch ("${{ matrix.bitness }}")
          {
              "64" { "x64" }
              "arm64" { "x64_arm64" }
          }
          echo "VC_ARCH=$arch" >>$env.GITHUB_OUTPUT
          
      - name: configure git
        run: |
            git config --global core.autocrlf false
            git config --global core.symblinks true 
            
      - name: Initialize the Python 3 installation
        uses: actions/setup-python@v2
        with:
          python-version: "3.x"
          architecture: "x64"

      - name: Locate the python root directory
        id: python_root_directory
        shell: powershell
        run: |
          $python_executable_path = $(Get-Command python.exe | Select-Object -ExpandProperty Definition)
          $python_root_directory = (Get-Item $python_executable_path).Directory.FullName
          echo "VALUE=$python_root_directory" >> $env:GITHUB_OUTPUT
      # Install the python dependencies needed for our testing framework
      - name: Install tests prerequisites
        run: |
          python -m pip install --upgrade pip
          python -m pip install wheel `
                                setuptools `
                                psutil `
                                timeout_decorator `
                                thrift==0.11.0 `
                                osquery `
                                pywin32

      - name: Clone osquery repository
        run: git clone https://github.com/osquery/osquery.git
        working-directory: ${{ github.workspace }}


      - name: install Strawberry perl
        working-directory: ${{ github.workspace }}/osquery
        shell: powershell
        run: |
          tools\ci\scripts\install_openssl_formula_dependencies.ps1


      - name: Install CMake
        working-directory: ${{ github.workspace }}
        shell: powershell
        run: |
          $long_cmake_ver = "3.21.4"
          $short_cmake_ver = $($long_cmake_ver.split(".")[0] + "." + $long_cmake_ver.split(".")[1])
          $folder_name = $("cmake-" + $long_cmake_ver + "-windows-x86_64")
          $archive_name = $($folder_name + ".zip")
          $url = $("https://cmake.org/files/v" + $short_cmake_ver + "/" + $archive_name)
          (New-Object System.Net.WebClient).DownloadFile($url, $archive_name)
          7z x -o${{ github.workspace }} -y $archive_name
          echo "${{ github.workspace }}\$folder_name\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      - name: Install Ninja
        working-directory: ${{ github.workspace }}
        shell: powershell
        run: |
          $long_version = "1.10.0"
          $archive_name = "ninja-win.zip"
          $url = $("https://github.com/ninja-build/ninja/releases/download/v" + $long_version + "/" + $archive_name)
          (New-Object System.Net.WebClient).DownloadFile($url, $archive_name)
          7z x -o${{ github.workspace }}\ninja -y $archive_name
          echo "${{ github.workspace }}\ninja" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          
      - name: Download and build osquery source
        working-directory: ${{ github.workspace }}
        shell: powershell
        run: |
          # git clone https://github.com/osquery/osquery
          cd osquery
          # Configure
          mkdir build
          cd build
          cmake -G "Visual Studio 16 2019" -A x64 ..
          # Build
          # cmake --build . --config RelWithDebInfo -j 3 --target install --config Release
          mkdir package_data
          $Env:DESTDIR="./osquery/build/package_data"
          cmake --build . --target install --config Release -j 3
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: Build file
          path: D:\a\osquery-osquery\osquery-osquery\osquery\build\osquery\build\package_data\Program Files\osquery
      - name: Store artifact path
        id: artifact_path
        run: echo "::set-output name=artifact_path::D:\a\osquery-osquery\osquery-osquery\osquery\build\osquery\build\package_data\Program Files\osquery"

  build_msi:
    needs: build_windows
    runs-on: windows-latest

    steps:
      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v1
      - name: file
        run: |
          $artifactPath = ${{ needs.build_windows.outputs.artifact_path }}
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: file
          path: artifactPath
      - name: Copy Copy msi.wxs
        run: |
          cp msi.wxs
        working-directory: ${{ github.workspace }}


      - name: Set path for candle and light
        run: |
          echo "C:\\Program Files (x86)\\WiX Toolset v3.11\\bin" >> $GITHUB_PATH
        shell: bash
      - name: Build WiX Project
        working-directory: ${{ github.workspace }}
        run: |
          # $artifactPath = ${{ needs.build_windows.outputs.artifact_path }}
          $env:Path = "C:\Program Files (x86)\WiX Toolset v3.11\bin;$env:Path"

        
          candle.exe -ext "WixUIExtension.dll" msi.wxs
          light.exe -ext "WixUIExtension.dll" -out Vistar.msi msi.wixobj

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: Vistar
          path: Vistar.msi
